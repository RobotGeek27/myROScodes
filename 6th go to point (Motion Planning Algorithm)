#! /usr/bin/env python

#import ros stuff

import rospy
from sensors_msgs.msg import laserScan
from geometry_msgs.msg import Twist, Point
from nav_msgs.msg import Odometry
from tf import transformations

import math

# robot state variables
position_ = Point()
yaw_ = 0

# machine state 
state_ = 0

# goal
desired_position_ = Point()
desired_position_.x = -3
desired_position_.y = 7
desired_position_.z = 0

#parameters
yaw_parameters_ = math.pi/90 # +/- 2 degree allowed
dist_precision_ = 0.3

#publishers
pub = None

#callbacks
def clbk_odom(msg):
    global position_
    global yaw_

    #position
    position_ = msg.pose.pose.position

    #yaw
    quaternion=(
        msg.pose.pose.position.orientation.x,
        msg.pose.pose.position.orientation.y,
        msg.pose.pose.position.orientation.z,
        msg.pose.pose.position.orientation.w
    )
    euler = transformations.euler_from_quaternion(quaternion)
    yaw_ = euler[2]

def change_state(state):
    global state_
    state_ = stateprint 'state changed to [%s]' % state_

def fix_yaw(des_pos):
    global yaw_, pub, yaw_precision_, state_
    desired_yaw = math.atan2(des_pos.y - position_.y,des_pos.x -  position_.x)
    err_yaw = desired_yaw - yaw_

    twist_msg = Twist()
    if math.fabs(err_yaw)>yaw_precision_:
        twist_msg.angular.z = 0.7 if err_yaw > 0 else -0.7

    pub.publish(twist_msg)

    #state change consitions
    if math.fabs(err_yaw) <= yaw_precision_:
        print'Yaw error: [%s]' % err_yaw
        change_state(1)smath.atan2(des_pos.y - position_.y,des_pos.x - position_.x)
        err_yaw = desired_yaw - yaw_
        err_pos = math.sqrt(pow(des_pos.y - position_.y, 2) + pow(des_pos.x - position_.x, 2))

def go_straight_shead(des_pos):
    global yaw-, pub, yaw_precision_, state_
    desired_yaw = 

    if err_pos > dist_precision_:
        twist_msg = Twist()
        twist_msg.linear.x = 0.6
        pub.publish(twist_msg)
    else:
        print 'Position error: [%s]' %err_pos
        change_state(2)

    #state change conditions
    if math.fabs(err_yaw) > yaw_precision_:
        print 'Yaw error: [%s]' % err_yaw
        change_state(0)

def done():
    twist_msg = 
    twist_msg.linear.x = 0
    twist_msg.linear.z = 0
    pub.publish(twist_msg) 

def main():
    global pub

    pospy.init_node('go_to_point')

    pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
 
    sub_odom = rospy.Subscriber('/odom', odometry, clbk_odom)

    rospy.Rate(20)
    while not rospy.is_shutdown():
        if state ==0:
            fix_yaw(desired_position_)
        elif state == 1:
            go_straight_ahead(desired_position_)
        elif state == 2:
            done()
            pass
        else:
            rospy.logerr('Unkown state!')
            pass
        rate.sleep()

if __name__ == '__main__':
    main()
